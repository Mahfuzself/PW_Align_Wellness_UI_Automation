import test, { expect } from "@fixtures/basepages";
import * as data from "testData/login.cred.json"
import { Page } from '@playwright/test';
test("TC - 01 : Validate empty broker name alert.",async({page,loginPage,clientsPage,brokerPage})=>{
    await page.goto("/login")
    await loginPage.login(data.validstandardusername, data.commonpassword)
    await brokerPage.clickClientsPage()
    await brokerPage.clickBrokerPage()
    await brokerPage.clickAddbrokerBtn()
    await brokerPage.clickAddnewBrokerBtn()
    await brokerPage.click_BrokerName_Empty_AlertIcon()
    await brokerPage.Verify_BrokerName_EmptyAlert_Text()
})
test("TC - 02 : Validate empty broker address alert.",async({page,loginPage,clientsPage,brokerPage})=>{
    await page.goto("/login")
    await loginPage.login(data.validstandardusername, data.commonpassword)
    await brokerPage.clickClientsPage()
    await brokerPage.clickBrokerPage()
    await brokerPage.clickAddbrokerBtn()
    await brokerPage.clickAddnewBrokerBtn()
    await brokerPage.clickBroker_EmptyAddress_AlertIcon()
    await brokerPage.Verify_BrokerAddress_EmptyAlert_Text()
})
test("TC - 03 : Validate empty broker contact person First name alert",async({page,loginPage,clientsPage,brokerPage})=>{
    await page.goto("/login")
    await loginPage.login(data.validstandardusername, data.commonpassword)
    await brokerPage.clickClientsPage()
    await brokerPage.clickBrokerPage()
    await brokerPage.clickAddbrokerBtn()
    await brokerPage.clickAddnewBrokerBtn()
    await brokerPage.clickBroker_ContactPerson_FirstName_AlertIcon()
    await brokerPage.Verify_BrokerContactPerson_FirstName_EmptyAlert_Text()
})
test("TC - 04 : Validate empty broker contact person Last name alert",async({page,loginPage,clientsPage,brokerPage})=>{
    await page.goto("/login")
    await loginPage.login(data.validstandardusername, data.commonpassword)
    await brokerPage.clickClientsPage()
    await brokerPage.clickBrokerPage()
    await brokerPage.clickAddbrokerBtn()
    await brokerPage.clickAddnewBrokerBtn()
    await brokerPage.clickBroker_ContactPerson_LastName_AlertIcon()
    await brokerPage.Verify_BrokerContactPerson_LastName_EmptyAlert_Text()
})
test("TC - 05 : Validate empty broker contact person Email alert",async({page,loginPage,clientsPage,brokerPage})=>{
    await page.goto("/login")
    await loginPage.login(data.validstandardusername, data.commonpassword)
    await brokerPage.clickClientsPage()
    await brokerPage.clickBrokerPage()
    await brokerPage.clickAddbrokerBtn()
    await brokerPage.clickAddnewBrokerBtn()
    await brokerPage.clickBroker_ContactPerson_Email_AlertIcon()
    await brokerPage.Verify_BrokerContactPerson_Email_EmptyAlert_Text()
})
test("TC - 06 : Validate broker added successfully",async({page,loginPage,clientsPage,brokerPage})=>{
    await page.goto("/login")
    await loginPage.login(data.validstandardusername, data.commonpassword)
    await brokerPage.clickClientsPage()
    await brokerPage.clickBrokerPage()
    await brokerPage.clickAddbrokerBtn()
    await brokerPage.inputBroker_Name()
    await brokerPage.selectBrokerType_Medical()
    await brokerPage.inputBrokerAddress()
    await brokerPage.InputBrokerContactPersonFirstName()
    await brokerPage.InputBrokerContactPersonLastName()
    await brokerPage.InputBrokerContactPersonFirstName()
    await brokerPage.InputBrokerContactPersonLastName()
    await brokerPage.InputBrokerContactPersonEmail()
    await brokerPage.InputBrokerContactPerson_PhoneNumber_BD()
    await brokerPage.clickAddNewBroker()
})
test("TC - 07 : Validate broker search field is working.",async({page,loginPage,clientsPage,brokerPage})=>{
    await page.goto("/login")
    await loginPage.login(data.validstandardusername, data.commonpassword)
    await brokerPage.clickClientsPage()
    await brokerPage.clickBrokerPage()
    await brokerPage.SearchBroker()
    await brokerPage.verifySearchBroker()
})
test("TC - 08 : Validate broker category wise filter is working.",async({page,loginPage,clientsPage,brokerPage})=>{
    await page.goto("/login")
    await loginPage.login(data.validstandardusername, data.commonpassword)
    await brokerPage.clickClientsPage()
    await brokerPage.clickBrokerPage()
    await brokerPage.BrokerCategory_FilterBy_Medical_InformationTechnology_EfficientBroker()
})
test("TC - 09 : Validate broker name date range wise filter is working.",async({page,loginPage,clientsPage,brokerPage})=>{
    await page.goto("/login")
    await loginPage.login(data.validstandardusername, data.commonpassword)
    await brokerPage.clickClientsPage()
    await brokerPage.clickBrokerPage()
    await brokerPage.clickCalenderBtn()
    await brokerPage.selectMonth()
    await brokerPage.selectYear()
    await brokerPage.selectDate_LowRange()
    await brokerPage.selectDate_HighRange()
    await brokerPage.verifySelectedBroker_DateRang()
})
test("TC - 10 : Validate broker name status wise filtering.",async({page,loginPage,clientsPage,brokerPage})=>{
    await page.goto("/login")
    await loginPage.login(data.validstandardusername, data.commonpassword)
    await brokerPage.clickClientsPage()
    await brokerPage.clickBrokerPage()
    await brokerPage.selectStatus_Pending()
    await brokerPage.selectStatus_Active()
    await brokerPage.selectStatus_Inactive()
    await brokerPage.selectStatus_InProgress()
})
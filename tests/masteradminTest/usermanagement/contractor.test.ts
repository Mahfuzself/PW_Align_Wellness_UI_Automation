import test, { expect } from "@fixtures/basepages";
import * as data from "testData/login.cred.json"
import ContractorPage from '@pages/Contractor.page';
let firstname = "",lastname="", rendomemail="",fullname = "";
// test("TC -01 : Validate contractor empty email message.",async({page,loginPage,ContactorPage,AlignwellPage})=>{
//     await page.goto("/login")
//     await page.waitForTimeout(4000)
//     await page.reload()
//     await loginPage.login(data.validstandardusername, data.commonpassword)
//     await AlignwellPage.clickUserManagementPage()
//     await ContactorPage.clickContractorPage()
//     await test.step("TC -01 : Validate contractor empty email message.",async()=>{
//         await ContactorPage.clickAddContactor()
//         await ContactorPage.clickAddNewContractor()
//         await ContactorPage.clickEmailAlertIcon()
//         await ContactorPage.verifyEmptyEmailText()
//     })
//     await test.step("TC -02 : Validate add new contarctor invalid email format message.",async()=>{
//         await ContactorPage.inputInvalidContractorEmail()
//         await ContactorPage.clickAddNewContractor()
//         await ContactorPage.VerifyInvalidEmailText()
//     })
    
// })
// test("TC -02 : Validate add new contarctor invalid email format message.",async({page,loginPage,ContactorPage,AlignwellPage})=>{
//     await page.goto("/login")
//     await page.waitForTimeout(4000)
//     await page.reload()
//     await loginPage.login(data.validstandardusername, data.commonpassword)
//     await AlignwellPage.clickUserManagementPage()
//     await ContactorPage.clickContractorPage()
//     await ContactorPage.clickAddContactor()
//     await ContactorPage.inputInvalidContractorEmail()
//     await ContactorPage.clickAddNewContractor()
//     //await ContactorPage.VerifyInvalidEmailText()
// })
test("TC -03 : Validate add new contractor is successfully added.",async({page,loginPage,ContactorPage,AlignwellPage,registrationPage,context})=>{
    await page.goto("/login")
    await loginPage.inputusernamefield(data["2FAUser"])
    await loginPage.enterLoginPassword("Test@1234")
    await loginPage.clickSubmittBtn()
    await page.waitForTimeout(5000)
    const Page = await context.newPage()
    await registrationPage.gotoForOtpValue(Page,data.OtpLink)
    await registrationPage.fillOtpMail(Page,data["2FAUser"])
    // await Page.locator("#EmailPhone").type(mail,{delay:100})
    await Page.waitForTimeout(5000)
    await registrationPage.clickOtpMailSubmittBtn(Page)
    await Page.locator("#otpValue").selectText();
    await Page.keyboard.press("Control+C");
    await Page.close()
    await  page.bringToFront()
    await loginPage.clickOTPInputField()
    await page.keyboard.press("Control+V")
    await page.waitForTimeout(4000)
    await AlignwellPage.clickUserManagementPage()
    await ContactorPage.clickContractorPage()
    await ContactorPage.clickAddContactor()
    firstname = await AlignwellPage.generateFirstName()
    lastname = await AlignwellPage.generateLastName()
    rendomemail = firstname+lastname+"@yopmail.com"
    await ContactorPage.InputRendomEmail(rendomemail)
    await ContactorPage.clickAddNewContractor()
    await test.step("Edit align well user",async()=>{
        rendomemail= rendomemail. toLowerCase( );
         await AlignwellPage.EditAddNewUser(rendomemail)
         firstname = await AlignwellPage.generateFirstName()
        lastname = await AlignwellPage.generateLastName()
        rendomemail = firstname+lastname+"@yopmail.com"
        await ContactorPage.InputRendomEmail(rendomemail)
        await ContactorPage.clickUpdateContactor()

        //td[text()=" jamiejohnson@yopmail.com "]/following-sibling::td[3]
    })
    await test.step("Validate successfully registration for alignwell Contractor user",async()=>{
        await page.locator("//div[@class='user-thumb']").first().click()
        await page.locator("//button[text()=' Logout ']").click()
        await page.waitForTimeout(1000)
        const Page = await context.newPage()
        await Page.bringToFront()
        const URL   = `https://dev.alignwell.com/registration?Email=${rendomemail}`
        await registrationPage.gotonewRegisteredMail(Page,URL)
        //  await Page.goto(`https://dev.alignwell.com/registration?Email=${rendomemail}`)
        await registrationPage.clickContinueBtn(Page)
            //  await Page.locator("//button[text()=' Continue ']").click()
             await Page.waitForTimeout(5000)
             const page3 = await context.newPage()
             await page3.bringToFront()
            await registrationPage.gotoForOtpValue(page3,data.OtpLink)
            // await page3.goto("https://dev.alignwell.com/get-key-value/!24@automation")
            await page3.reload()
            rendomemail= rendomemail. toLowerCase( );
            await registrationPage.fillOtpMail(page3,rendomemail)
            // await page3.locator("#EmailPhone").fill(rendomemail)
            await registrationPage.clickOtpMailSubmittBtn(page3)
            await page3.locator("#submitBtn").click({force:true})
            await page3.waitForTimeout(1000)
            // const modifier = await page3.locator("#otpValue")
            // await page3.locator("#otpValue").focus();
            //await page3.keyboard.press('Control+A');
            await page3.locator("#otpValue").selectText()
            await page3.keyboard.press("Control+C")
            await Page.bringToFront()
            await Page.locator("(//input[@placeholder='-'])[1]").click();
            await Page.waitForTimeout(2000)
            await Page.keyboard.press("Control+V")
            await Page.waitForTimeout(5000)
            await Page.locator('//input[@name="InputPhone"]').fill("8057651210")
            
            await Page.locator("//button[text()=' Continue ']").click()
            await Page.waitForTimeout(5000)
            // await page3.bringToFront()
            // await page3.goto("https://dev.alignwell.com/get-key-value/!24@automation")
            await page3.reload()
            await page3.locator("#EmailPhone").fill("+18057651210")
            await page3.waitForTimeout(2000)
            await page3.locator("#submitBtn").click({force:true})
            await page3.bringToFront()
            await page3.locator("#otpValue").selectText()
            await page3.keyboard.press("Control+C")
            await Page.bringToFront()
            await Page.locator("(//input[@placeholder='-'])[1]").click();
            await Page.waitForTimeout(2000)
            await Page.keyboard.press("Control+V")
            await Page.bringToFront()
            await Page.locator("#firstName").fill(firstname)
            await Page.locator('//input[@formcontrolname="LastName"]').fill(lastname)
            await page.waitForTimeout(3000)
            await Page.locator('#gender').selectOption({label:"Male"},{timeout : 1000})
            await Page.waitForTimeout(2000)
            await registrationPage.inputDOB(Page)
            await registrationPage.selectDesignation(Page)
            await registrationPage.selectDepartment(Page)
            await registrationPage.inputAddress(Page)
            await registrationPage.clickContinue(Page)
            await registrationPage.inputPassword(Page)
            await registrationPage.inputConfirmPassword(Page)
            await registrationPage.clickRegisterSubmitBtn(Page)
            fullname = firstname+" "+lastname;
            // console.log(fullname)
            await registrationPage.verifyAcoknowledge(Page)
            await registrationPage.clickAcceptBtn(Page)
            // await registrationPage.verifyUserRegisteredSuccessfully(Page)
            await registrationPage.verifyAddNewRegisteredUser(Page,fullname)
            await registrationPage.clickUserManagementPage(Page)
            await registrationPage.clickContractorPage(Page)
             await registrationPage.verifyAddNewContractorAfterRegistered_Active(Page,rendomemail)
             

            
            // await Page.locator("//input[@placeholder='Enter your inbox here']").fill(rendomemail)
            // await Page.locator("//i[@class='material-icons-outlined f36']").click()
            // await Page.waitForTimeout(3000)
            // const ele = await Page.frameLocator("#ifmail").locator("(//div[@id='mail']//a)[1]")
            // await expect(ele).toContainText("ACTIVATE YOUR ACCOUNT")
            // await ele.click()

    })
})
// test("TC -04 : Validate contractor search field is working.",async({page,loginPage,ContactorPage,AlignwellPage})=>{
//     await page.goto("/login")
//     await page.waitForTimeout(4000)
//     await page.reload()
//     await loginPage.login(data.validstandardusername, data.commonpassword)
//     await AlignwellPage.clickUserManagementPage()
//     await ContactorPage.clickContractorPage()
//     await ContactorPage.SearchContarctor_By_FirstName()
// })
// test("TC -05 : Validate contractor page column wise sorting is working..",async({page,loginPage,ContactorPage,AlignwellPage})=>{
//     await page.goto("/login")
//     await page.waitForTimeout(4000)
//     await page.reload()
//     await loginPage.login(data.validstandardusername, data.commonpassword)
//     await AlignwellPage.clickUserManagementPage()
//     await ContactorPage.clickContractorPage()
//     await ContactorPage.SearchContarctor_By_FirstName()
//     await ContactorPage.SearchContarctor_By_Email()
// })
// test("TC -06 : Validate contractor successfully deactivated.",async({page,loginPage,ContactorPage,AlignwellPage})=>{
//     await page.goto("/login")
//     await page.waitForTimeout(4000)
//     await page.reload()
//     await loginPage.login(data.validstandardusername, data.commonpassword)
//     await AlignwellPage.clickUserManagementPage()
//     await ContactorPage.clickContractorPage()
//     await ContactorPage.SpecificContractorActionThreeDot()
//     await ContactorPage.clickDeActivate()
//     await ContactorPage.SpecificContractorActionThreeDot()
//     await ContactorPage.clickActivate()
    
// })
// test("TC -07 : Validate contractor mail resend link button is working.",async({page,loginPage,ContactorPage,AlignwellPage})=>{
//     await page.goto("/login")
//     await page.waitForTimeout(4000)
//     await page.reload()
//     await loginPage.login(data.validstandardusername, data.commonpassword)
//     await AlignwellPage.clickUserManagementPage()
//     await ContactorPage.clickContractorPage()
//     await ContactorPage.SpecificContractorActionThreeDotForResendLink()
//     await ContactorPage.clickResendLink()
//     //await ContactorPage.clickActivate()
    
// })
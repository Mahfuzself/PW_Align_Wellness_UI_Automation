import test, { expect } from "@fixtures/basepages";
import * as data from "testData/login.cred.json"
import { Page } from '@playwright/test';
test("TC - 01 : Validate Add provider empty email message.",async({page,loginPage,HealthcareProviderPage,AlignwellPage}) =>{
    await page.goto("/login")
    await page.waitForTimeout(4000)
    await page.reload()
    await loginPage.login(data.validstandardusername, data.commonpassword)
    await AlignwellPage.clickUserManagementPage()
    await HealthcareProviderPage.clickHealthcareProviderPage()
    await HealthcareProviderPage.clickAddProviderBtn()
    await HealthcareProviderPage.clickAddNewProviderBtn()
    await HealthcareProviderPage.clickEmptyEmailAlertIcon()
    await HealthcareProviderPage.verifyEmptyEmailText()
})
test("TC - 02 : Validate Add provider category empty message.",async({page,loginPage,HealthcareProviderPage,AlignwellPage}) =>{
    await page.goto("/login")
    await page.waitForTimeout(4000)
    await page.reload()
    await loginPage.login(data.validstandardusername, data.commonpassword)
    await AlignwellPage.clickUserManagementPage()
    await HealthcareProviderPage.clickHealthcareProviderPage()
    await HealthcareProviderPage.clickAddProviderBtn()
    await HealthcareProviderPage.clickAddNewProviderBtn()
    await HealthcareProviderPage.clickEmptyProvidercategoryAlertIcon()
    await HealthcareProviderPage.verifyEmptyProviderCategoryText()
})
test("TC - 03 : Validate Add new provider successfully added.",async({page,loginPage,HealthcareProviderPage,AlignwellPage}) =>{
    await page.goto("/login")
    await page.waitForTimeout(4000)
    await page.reload()
    await loginPage.login(data.validstandardusername, data.commonpassword)
    await AlignwellPage.clickUserManagementPage()
    await HealthcareProviderPage.clickHealthcareProviderPage()
    await HealthcareProviderPage.clickAddProviderBtn()
    await HealthcareProviderPage.InputRendomEmail()
    await HealthcareProviderPage.SelectHealthProvider_Doctor()
   // await HealthcareProviderPage.clickAddNewProviderBtn()
    await HealthcareProviderPage.SelectHealthProvider_FemaleNurse()
})
test("TC - 04 : Validate providers search field is working.",async({page,loginPage,HealthcareProviderPage,AlignwellPage}) =>{
    await page.goto("/login")
    await page.waitForTimeout(4000)
    await page.reload()
    await loginPage.login(data.validstandardusername, data.commonpassword)
    await AlignwellPage.clickUserManagementPage()
    await HealthcareProviderPage.clickHealthcareProviderPage()
    // await HealthcareProviderPage.clickAddProviderBtn()
    await HealthcareProviderPage.SearchBy_HealthCareProvider_FirstName()
})
test("TC - 05 : Validate providers status wise filtering.",async({page,loginPage,HealthcareProviderPage,AlignwellPage}) =>{
    await page.goto("/login")
    await page.waitForTimeout(4000)
    await page.reload()
    await loginPage.login(data.validstandardusername, data.commonpassword)
    await AlignwellPage.clickUserManagementPage()
    await HealthcareProviderPage.clickHealthcareProviderPage()
    await HealthcareProviderPage.SelectStatus_Active()
    await HealthcareProviderPage.SelectStatus_Inactive()
    await HealthcareProviderPage.SelectStatus_Pending()
    await HealthcareProviderPage.SelectStatus()
})
test("TC - 06 : Validate providers type wise filtering.",async({page,loginPage,HealthcareProviderPage,AlignwellPage}) =>{
    await page.goto("/login")
    await page.waitForTimeout(4000)
    await page.reload()
    await loginPage.login(data.validstandardusername, data.commonpassword)
    await AlignwellPage.clickUserManagementPage()
    await HealthcareProviderPage.clickHealthcareProviderPage()
    await HealthcareProviderPage.HealthCareProviderType_Doctor()
    await HealthcareProviderPage.HealthCareProviderType_FemaleNurse()
    await HealthcareProviderPage.HealthCareProviderType_MaleNurse()
})
test("TC - 06 :Validate providers column wise sorting is working.",async({page,loginPage,HealthcareProviderPage,AlignwellPage}) =>{
    await page.goto("/login")
    await page.waitForTimeout(4000)
    await page.reload()
    await loginPage.login(data.validstandardusername, data.commonpassword)
    await AlignwellPage.clickUserManagementPage()
    await HealthcareProviderPage.clickHealthcareProviderPage()
    await HealthcareProviderPage.HealthProviderName_sortingOrder()
    await HealthcareProviderPage.HealthycareProvider_PhoneNumber_sorting()
    await HealthcareProviderPage.Healtcareprovider_EmailAddress_sortingOrder()
    await HealthcareProviderPage.HealthProviderName_sortingOrder()
    await HealthcareProviderPage.Healtcareprovider_TaskCompletion_sortingOrder()
    await HealthcareProviderPage.Healtcareprovider_Status_sortingOrder()
    
})
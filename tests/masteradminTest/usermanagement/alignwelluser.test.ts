import test, { expect } from "@fixtures/basepages";
import * as data from "testData/login.cred.json"
import AlignwelluserPage from "@pages/Alignwelluser.page";
// import { Browser, Page } from '@playwright/test';
// const { chromium } = require('playwright');
// test("TC - 01 : Validate Align well user invalid email message.",async({page,loginPage,AlignwellPage})=>{
//     await page.goto("/login")
//     await page.waitForTimeout(4000)
//     await page.reload()
//     await loginPage.login(data.validstandardusername, data.commonpassword)
//     test.step("Now click usermanagementPage",async() => {
//         await AlignwellPage.clickUserManagementPage()
//         await page.waitForTimeout(3000)
//     })
//         await AlignwellPage.clickAlignwellUser()
//         await page.waitForTimeout(3000)
//         await AlignwellPage.clickAddUserBtn()
//         await AlignwellPage.clickAddNewUserBtn()
//         await AlignwellPage.clickEmptyEmailIcon()
//         await AlignwellPage.verifyEmptyEmailText()
// })
// test("TC - 02 : Validate Align well user empty role message.",async({page,loginPage,AlignwellPage})=>{
//     await page.goto("/login")
//     await page.waitForTimeout(4000)
//     await page.reload()
//     await loginPage.login(data.validstandardusername, data.commonpassword)
//     test.step("Now click usermanagementPage",async() => {
//         await AlignwellPage.clickUserManagementPage()
//         await page.waitForTimeout(3000)
//     })
//         await AlignwellPage.clickAlignwellUser()
//         await page.waitForTimeout(3000)
//         await AlignwellPage.clickAddUserBtn()
//         await AlignwellPage.inputAdduserEmail()
//         await AlignwellPage.clickAddNewUserBtn()
//         await AlignwellPage.clickEmptyRoleIcon()
//         await AlignwellPage.verifyEmptyRoleText()
// })
test("TC - 03 : Validate Align well user invalid email message.",async({page,loginPage,AlignwellPage})=>{
    await page.goto("/login")
    await page.waitForTimeout(4000)
    await page.reload()
    await loginPage.login(data.validstandardusername, data.commonpassword)
    test.step("Now click usermanagementPage",async() => {
        await AlignwellPage.clickUserManagementPage()
        await page.waitForTimeout(3000)
    })
        await AlignwellPage.clickAlignwellUser()
        await page.waitForTimeout(3000)
        await AlignwellPage.clickAddUserBtn()
        await AlignwellPage.inputInvaliduserEmail()
        await AlignwellPage.selectMasterAdminUser()
        await AlignwellPage.clickAddNewUserBtn()
        await page.waitForTimeout(4000)
        await AlignwellPage.clickEmptyEmailIcon()
        await AlignwellPage.verifyInvalidEmail()
})
test.only("TC - 04 : Validate Add new user is successfully added.",async({page,loginPage,AlignwellPage,context})=>{
    await page.goto("/login")
    await page.waitForTimeout(4000)
    await page.reload()
    await loginPage.login(data.validstandardusername, data.commonpassword)
    test.step("Now click usermanagementPage",async() => {
        await AlignwellPage.clickUserManagementPage()
        await page.waitForTimeout(3000)
    })
        await AlignwellPage.clickAlignwellUser()
        await page.waitForTimeout(3000)
        await AlignwellPage.clickAddUserBtn()
        const firstname = await AlignwellPage.generateFirstName()
        const lastname = await AlignwellPage.generateLastName()
        const rendomemail = firstname+lastname+"@yopmail.com"
        await AlignwellPage.InputRendomEmail(rendomemail)
        await AlignwellPage.selectMasterAdminUser()
        await AlignwellPage.clickAddNewUserBtn()
        await page.waitForTimeout(5000)
        const Page = await context.newPage()
        const [newtab] = await Promise.all([
            await Page.goto("https://yopmail.com/")
          ])
    await Page.goto("https://yopmail.com/")
    await Page.locator("//input[@placeholder='Enter your inbox here']").fill(rendomemail)
    await Page.locator("//i[@class='material-icons-outlined f36']").click()
    await Page.waitForTimeout(3000)
    const ele = await Page.frameLocator("#ifmail").locator("(//div[@id='mail']//a)[1]")
    await expect(ele).toContainText("ACTIVATE YOUR ACCOUNT")
    await ele.click()
})
// test("TC - 05 : Validate Align well user search field is working..",async({page,loginPage,AlignwellPage})=>{
//     //await AlignwellPage.RendomEmail()
//     await page.goto("/login")
//     await page.waitForTimeout(4000)
//     await page.reload()
//     await loginPage.login(data.validstandardusername, data.commonpassword)
//     test.step("Now click usermanagementPage",async() => {
//         await AlignwellPage.clickUserManagementPage()
//         await page.waitForTimeout(3000)
//     })
//         await AlignwellPage.clickAlignwellUser()
//         await page.waitForTimeout(3000)
//         await AlignwellPage.SearchAlignUser_By_FirstName()
// })
// test("TC - 06 : Validate Align well user search field is working.",async({page,loginPage,AlignwellPage})=>{
//     //await AlignwellPage.RendomEmail()
//     await page.goto("/login")
//     await page.waitForTimeout(4000)
//     await page.reload()
//     await loginPage.login(data.validstandardusername, data.commonpassword)
//         await AlignwellPage.clickUserManagementPage()
//         await page.waitForTimeout(3000)
//         await AlignwellPage.clickAlignwellUser()
//         await page.waitForTimeout(4000)
//         await AlignwellPage.Filter_By_MasterAdmin()
//         await AlignwellPage.Filter_By_Admin()
//         await AlignwellPage.Filter_By_Standard()
// })
// test.skip("TC - 07 : Validate Align well user column wise sorting is woorking.",async({page,loginPage,AlignwellPage})=>{
//     await page.goto("/login")
//     await page.waitForTimeout(4000)
//     await page.reload()
//     await loginPage.login(data.validstandardusername, data.commonpassword)
//         await AlignwellPage.clickUserManagementPage()
//         await page.waitForTimeout(3000)
//         await AlignwellPage.clickAlignwellUser()
//         await page.waitForTimeout(4000)
// })
// test("TC - 08 : Validate Align well user  Resend link is working.",async({page,loginPage,AlignwellPage})=>{
//     await page.goto("/login")
//     await page.waitForTimeout(4000)
//     await page.reload()
//     await loginPage.login(data.validstandardusername, data.commonpassword)
//         await AlignwellPage.clickUserManagementPage()
//         await page.waitForTimeout(3000)
//         await AlignwellPage.clickAlignwellUser()
//         await page.waitForTimeout(7000)
//         await AlignwellPage.ClickResendLink()
//         await AlignwellPage.verifyResendLinkSuccessfullyMessage()
// })
// test.skip("TC - 09 : Validate Align well user edit button is working.",async({page,loginPage,AlignwellPage})=>{
//     await page.goto("/login")
//     await page.waitForTimeout(4000)
//     await page.reload()
//     await loginPage.login(data.validstandardusername, data.commonpassword)
//         await AlignwellPage.clickUserManagementPage()
//         await page.waitForTimeout(3000)
//         await AlignwellPage.clickAlignwellUser()
//         await page.waitForTimeout(7000)
//         await AlignwellPage.ClickResendLink()
//         await AlignwellPage.verifyResendLinkSuccessfullyMessage()
// })
// test("TC - 10 : Validate Align well user deactivate button is working.",async({page,loginPage,AlignwellPage})=>{
//     await page.goto("/login")
//     await page.waitForTimeout(4000)
//     await page.reload()
//     await loginPage.login(data.validstandardusername, data.commonpassword)
//         await AlignwellPage.clickUserManagementPage()
//         await page.waitForTimeout(3000)
//         await AlignwellPage.clickAlignwellUser()
//         await page.waitForTimeout(7000)
//         await AlignwellPage.ClickDeactivateAndActivate()
// })
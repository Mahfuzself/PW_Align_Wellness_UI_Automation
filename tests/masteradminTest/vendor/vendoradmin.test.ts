import test,{ expect } from "@fixtures/basepages";
import * as data from "testData/login.cred.json"
import * as name from "testData/Name.json"
const { chromium } = require('playwright');
import { Browser, Page } from '@playwright/test';
test("TC - 01 : Verify Empty vendor name alert text.",async({page,loginPage,vendoradminPage,registrationPage,context})=>{
    let firstname = "",lastname="", rendomemail="",fullname = "";
    await page.goto("/login")
    await page.reload()
    await loginPage.inputusernamefield(data["2FAUser"])
    await loginPage.enterLoginPassword("Test@1234")
    await loginPage.clickSubmittBtn()
    await page.waitForTimeout(5000)
    const Page = await context.newPage()
    await registrationPage.gotoForOtpValue(Page)
    await registrationPage.fillOtpMail(Page,data["2FAUser"])
    await Page.waitForTimeout(5000)
    await registrationPage.clickOtpMailSubmittBtn(Page)
    await Page.locator("#otpValue").focus();
    await Page.locator("#otpValue").selectText();
    await Page.keyboard.press("Control+C");
    await Page.close()
    await  page.bringToFront()
    await loginPage.clickOTPInputField()
    await page.keyboard.press("Control+V")
    await page.waitForTimeout(4000)
    await test.step("TC - 01 : Verify Empty vendor name alert text.",async()=>{
        await vendoradminPage.clickVendorPage()
        await vendoradminPage.verifyVendorListText()
        await vendoradminPage.clickAddVendorBtn()
        await vendoradminPage.clickAddNewVendorBtn()
        await vendoradminPage.clickEmptyVendorNameAlertIcon()
        await vendoradminPage.verifyVendorNameCannotBeEmptyText()
        await vendoradminPage.CloseAddVendorPopup(data["2FAUser"])
    })
    await test.step("TC 02 : Verify Empty vendor contact person first name alert text.",async()=>{
        // await vendoradminPage.clickVendorPage()
        await vendoradminPage.verifyVendorListText()
        await vendoradminPage.clickAddVendorBtn()
        await vendoradminPage.clickAddNewVendorBtn()
        await vendoradminPage.clickVendorContactPersonFirstNameEmptyAlertIcon()
        await vendoradminPage.verifyVendorContactPersonFirstNameCannotBeEmptyText()
        await vendoradminPage.CloseAddVendorPopup(data["2FAUser"])
    })
    await test.step("TC 03 : Verify Empty vendor contact person Last name alert text.",async()=>{
        // await vendoradminPage.clickVendorPage()
        await vendoradminPage.verifyVendorListText()
        await vendoradminPage.clickAddVendorBtn()
        await vendoradminPage.clickAddNewVendorBtn()
        await vendoradminPage.clickVendorContactPersonLastNameEmptyAlertIcon()
        await vendoradminPage.verifyVendorContactPersonLastNameCannotBeEmptyText()
        await vendoradminPage.CloseAddVendorPopup(data["2FAUser"])
    })
    await test.step("TC 04 : Verify Empty vendor contact person email alert text.",async()=>{
        // await vendoradminPage.clickVendorPage()
        await vendoradminPage.verifyVendorListText()
        await vendoradminPage.clickAddVendorBtn()
        await vendoradminPage.clickAddNewVendorBtn()
        await vendoradminPage.clickVendorContactPersonEMailEmptyAlertIcon()
        await vendoradminPage.verifyVendorContactPersonEmailCannotBeEmptyText()
        await vendoradminPage.CloseAddVendorPopup(data["2FAUser"])
    })
    await test.step("TC 05 : Validate add new vendor Dentists category successfully created.",async()=>{
        // await vendoradminPage.clickVendorPage()
        await vendoradminPage.verifyVendorListText()
        await vendoradminPage.clickAddVendorBtn()
        await vendoradminPage.InputVendorName((await vendoradminPage.generateFirstName())+(await vendoradminPage.generateLastName()))
        await vendoradminPage.checkedVendorCategory_Dentist()
        await vendoradminPage.upload_vendor_ProfileImages()
        await vendoradminPage.upload_vendor_BannerImages()
        await vendoradminPage.inputVendorContactPersonFirstName(await vendoradminPage.generateFirstName())
        await vendoradminPage.inputVendorContactPersonLastName(await vendoradminPage.generateLastName())
        await vendoradminPage.inputVendorContactPersonEmail((await vendoradminPage.generateFirstName())+(await vendoradminPage.generateLastName())+"@yopmail.com")
        await vendoradminPage.InputVendorContactPerson_PhoneNumber_BD()
        await vendoradminPage.clickAddNewVendorBtn()
        // await vendoradminPage.CloseAddVendorPopup(data["2FAUser"])
    })
   
})
// test("TC 02 : Verify Empty vendor contact person first name alert text.",async({page,loginPage,vendoradminPage})=>{
//     await page.goto("/login")
//     await loginPage.login(data.validstandardusername, data.commonpassword)
//     await vendoradminPage.clickVendorPage()
//     await vendoradminPage.verifyVendorListText()
//     await vendoradminPage.clickAddVendorBtn()
//     await vendoradminPage.clickAddNewVendorBtn()
//     await vendoradminPage.clickVendorContactPersonFirstNameEmptyAlertIcon()
//     await vendoradminPage.verifyVendorContactPersonFirstNameCannotBeEmptyText()
// })
// test("TC 03 : Verify Empty vendor contact person Last name alert text.",async({page,loginPage,vendoradminPage})=>{
//     await page.goto("/login")
//     await loginPage.login(data.validstandardusername, data.commonpassword)
//     await vendoradminPage.clickVendorPage()
//     await vendoradminPage.verifyVendorListText()
//     await vendoradminPage.clickAddVendorBtn()
//     await vendoradminPage.clickAddNewVendorBtn()
//     await vendoradminPage.clickVendorContactPersonLastNameEmptyAlertIcon()
//     await vendoradminPage.verifyVendorContactPersonLastNameCannotBeEmptyText()
// })
// test("TC 04 : Verify Empty vendor contact person email alert text.",async({page,loginPage,vendoradminPage})=>{
//     await page.goto("/login")
//     await loginPage.login(data.validstandardusername, data.commonpassword)
//     await vendoradminPage.clickVendorPage()
//     await vendoradminPage.verifyVendorListText()
//     await vendoradminPage.clickAddVendorBtn()
//     await vendoradminPage.clickAddNewVendorBtn()
//     await vendoradminPage.clickVendorContactPersonEMailEmptyAlertIcon()
//     await vendoradminPage.verifyVendorContactPersonEmailCannotBeEmptyText()
// })
// test("TC 05 : Validate add new vendor Dentists category successfully created.",async({page,loginPage,vendoradminPage})=>{
//     await page.goto("/login")
//     await loginPage.login(data.validstandardusername, data.commonpassword)
//     await vendoradminPage.clickVendorPage()
//     await vendoradminPage.verifyVendorListText()
//     await vendoradminPage.clickAddVendorBtn()
//     await vendoradminPage.InputVendorName((await vendoradminPage.generateFirstName())+(await vendoradminPage.generateLastName()))
//     await vendoradminPage.checkedVendorCategory_Dentist()
//     await vendoradminPage.upload_vendor_ProfileImages()
//     await vendoradminPage.upload_vendor_BannerImages()
//     await vendoradminPage.inputVendorContactPersonFirstName(await vendoradminPage.generateFirstName())
//     await vendoradminPage.inputVendorContactPersonLastName(await vendoradminPage.generateLastName())
//     await vendoradminPage.inputVendorContactPersonEmail((await vendoradminPage.generateFirstName())+(await vendoradminPage.generateLastName())+"@yopmail.com")
//     await vendoradminPage.InputVendorContactPerson_PhoneNumber_BD()
//     await vendoradminPage.clickAddNewVendorBtn()
// })
// test("TC 06 : Validate crated Dentists category vendor shows on vendor list.",async({page,loginPage,vendoradminPage})=>{
//     await page.goto("/login")
//     await loginPage.login(data.validstandardusername, data.commonpassword)
//     await vendoradminPage.clickVendorPage()
//     await vendoradminPage.verifyVendorListText()
//     await vendoradminPage.clickCreatedvendorDetails()
//     await vendoradminPage.clickVendorDetails_EmployeeList()
//     await vendoradminPage.copyEmployeeEmail()
//     await vendoradminPage.pasteEmployeeEmail()
// })
// test.only("TC 07 : Validate add new vendor Physical Therapy  and Nutritionists category successfully created.",async({page,loginPage,vendoradminPage})=>{
//     await page.goto("/login")
//     await loginPage.login(data.validstandardusername, data.commonpassword)
//     await vendoradminPage.clickVendorPage()
//     await vendoradminPage.verifyVendorListText()
//     await vendoradminPage.clickAddVendorBtn()
//     const firstname = await vendoradminPage.generateFirstName() 
//     const  lastname = await vendoradminPage.generateLastName()
//     const VendorName = firstname + " N. "+ lastname
//     await vendoradminPage.InputVendorName(VendorName)
//     await vendoradminPage.checkedVendorCategory_PhysicalTherapy()
//     await vendoradminPage.checkedVendorCategory_Nutritionists()
//     await vendoradminPage.upload_vendor_ProfileImages()
//     await vendoradminPage.upload_vendor_BannerImages()
//     const email = firstname+lastname + "@yopmail.com"
//     await vendoradminPage.inputVendorContactPersonFirstName(firstname)
//     await vendoradminPage.inputVendorContactPersonLastName(lastname)
//     await vendoradminPage.inputVendorContactPersonEmail(email)
//     await vendoradminPage.InputVendorContactPerson_PhoneNumber_BD()
//     await vendoradminPage.clickAddNewVendorBtn()
// })
// test("TC 08 : Validate crated Physical Therappy and Nutritionists category vendor shows on vendor list.",async({page,loginPage,vendoradminPage,context})=>{
//     await page.goto("/login")
//     await page.waitForTimeout(3000)
//     await loginPage.login(data.validmasteradminusername, data.commonpassword)
//     await page.waitForTimeout(3000)
//     await vendoradminPage.clickVendorPage()
//     await vendoradminPage.verifyVendorListText()
//     await vendoradminPage.clickCreatedvendorDetails()
//     await vendoradminPage.clickVendorDetails_EmployeeList()
//     const email : any = await vendoradminPage.copyEmployeeEmail()
//     await vendoradminPage.clickVendorPage()
//     await vendoradminPage.verifyVendorListText()
//     await vendoradminPage.pasteEmployeeEmail()
//     await vendoradminPage.LogoutUser()

//     // await page.keyboard.press("Control+t")
//     //blank tap Open same browser
//     const Page = await context.newPage()
//     const [newtab] = await Promise.all([
//         await Page.goto("https://yopmail.com/")
//       ])
//     // await page.goto("https://yopmail.com/")
//     await Page.locator("//input[@placeholder='Enter your inbox here']").fill(email)
//     await Page.locator("//i[@class='material-icons-outlined f36']").click()
//     await Page.waitForTimeout(3000)
//     const ele = await Page.frameLocator("#ifmail").locator("(//div[@id='mail']//a)[1]")
//     // await expect(ele).toContainText("ACTIVATE YOUR ACCOUNT")
//     await ele.click()
//     await Page.waitForTimeout(10000)
//     // const Page = await context.newPage()
//     // const [newtab] = await Promise.all([
//     //     newtab
//     //     await Page.goto("https://yopmail.com/")
//     //   ])
//     await Page.locator('//button[text()=" Continue "]').click()
//     await page.bringToFront()

// })